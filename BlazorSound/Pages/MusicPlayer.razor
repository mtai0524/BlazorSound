@page "/music-player"
@inject IWebHostEnvironment Environment
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor HttpContextAccessor
@using Microsoft.AspNetCore.Components
<h3>Music Player</h3>

@if (mp3Files != null && mp3Files.Any())
{
    <ul>
        @foreach (var file in mp3Files)
        {
            if (!string.IsNullOrEmpty(file))
            {
                <li>
                    <button @onclick="() => PlayFile(file)">@file</button>
                    <button @onclick="() => DeleteFile(file)" class="btn btn-danger btn-sm">Delete</button>
                </li>
            }
        }
    </ul>

    @if (!string.IsNullOrEmpty(selectedFile))
    {
        <audio id="audioPlayerContainer" controls @key="audioKey" @onended="HandleAudioEnded" @attributes="audioAttributes">
            <source src="@selectedFile" type="audio/mpeg">
            Your browser does not support the audio element.
        </audio>
    }
}
else
{
    <p>No MP3 files found.</p>
}
<button @onclick=AutoPlay>
    @if (isAutoplayEnabled == true)
    {
        <span>đang bật auto play</span>
    }
    else
    {
        <span>đang tắt auto play</span>
    }
</button>
@code {
    private List<string?> mp3Files = new List<string?>();
    private string? selectedFile;
    private int audioKey;
    private int currentTrackIndex = -1;
    private bool isAutoplayEnabled = false;
    private ElementReference audioElement;
    private Dictionary<string, object> audioAttributes = new Dictionary<string, object>();
    private CancellationTokenSource cancellationTokenSource;
   
    private async Task InitializeComponent()
    {
        await LoadFiles();
        await AutoPlay();

        var savedSong = await JSRuntime.InvokeAsync<string>("musicPlayerInterop.getCookie", "savedSong");
        if (!string.IsNullOrEmpty(savedSong))
        {
            selectedFile = savedSong;
            await PlayFile(Path.GetFileName(savedSong));
            await JSRuntime.InvokeVoidAsync("musicPlayerInterop.playMusicFromSavedTime", selectedFile);
        }

        cancellationTokenSource = new CancellationTokenSource();
        var token = cancellationTokenSource.Token;

        var intervalMilliseconds = 1000; 
        _ = Task.Run(async () =>
        {
            while (!token.IsCancellationRequested)
            {
                try
                {
                    await JSRuntime.InvokeVoidAsync("musicPlayerInterop.updatePlayTime", selectedFile);
                    await Task.Delay(intervalMilliseconds, token);
                }
                catch (TaskCanceledException)
                {
                    break;
                }
                catch (JSException ex)
                {
                    Console.WriteLine($"JavaScript interop error: {ex.Message}");
                    break;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error: {ex.Message}");
                    break;
                }
            }
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeComponent();
        }
    }

    private async Task LoadFiles()
    {
        var uploadPath = Path.Combine(Environment.WebRootPath, "uploads");
        if (Directory.Exists(uploadPath))
        {
            mp3Files = Directory.GetFiles(uploadPath, "*.mp3")
                                .Select(Path.GetFileName)
                                .ToList();
        }
    }

    private async Task AutoPlay()
    {
        isAutoplayEnabled = !isAutoplayEnabled;
        UpdateAudioAttributes();
    }

    private async Task PlayFile(string fileName)
    {
        selectedFile = Path.Combine("uploads", fileName);
        currentTrackIndex = mp3Files.FindIndex(f => f == Path.GetFileName(fileName));
        audioKey++;
        // await JSRuntime.InvokeVoidAsync("musicPlayerInterop.deletePlayTimeCookies");

        await JSRuntime.InvokeVoidAsync("musicPlayerInterop.setCookie", "savedSong", selectedFile, 7);
        await JSRuntime.InvokeVoidAsync("musicPlayerInterop.updatePlayTime", selectedFile);
        await JSRuntime.InvokeVoidAsync("musicPlayerInterop.playMusicFromSavedTime", selectedFile);
        StateHasChanged();
    }

    private async void DeleteFile(string fileName)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Dữ liệu sau khi xóa sẽ không thể khôi phục");
        if (confirmed)
        {
            var filePath = Path.Combine(Environment.WebRootPath, "uploads", fileName);
            if (File.Exists(filePath))
            {
                File.Delete(filePath);
                LoadFiles(); // Reload
                if (selectedFile == Path.Combine("uploads", fileName))
                {
                    selectedFile = null;
                    audioKey++;
                }
                StateHasChanged();
            }
        }
        else
        {
        }
        
    }

    private void HandleAudioEnded()
    {
        if (currentTrackIndex < mp3Files.Count - 1)
        {
            PlayFile(mp3Files[currentTrackIndex + 1]);
        }
        else
        {
            selectedFile = null;
            audioKey++;
            StateHasChanged();
        }
    }

    private void UpdateAudioAttributes()
    {
        if (isAutoplayEnabled)
        {
            audioAttributes["autoplay"] = "autoplay";
        }
        else
        {
            if (audioAttributes.ContainsKey("autoplay"))
            {
                audioAttributes.Remove("autoplay");
            }
        }
    }

    private async Task PlayAudio(string audioSrc)
    {
        await JSRuntime.InvokeVoidAsync("musicPlayerInterop.playAudio", audioSrc);
    }
}
